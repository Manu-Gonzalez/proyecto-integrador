        AppTelemetry._instance = null;
        Telemetry.AppTelemetry = AppTelemetry;
        class WebAppTelemetry {
            constructor() {
                this._webAppActivity = null;
                if (!WebAppTelemetry._allowInstantiation) {
                    throw new Error("Error: Instantiation failed: Use getInstance() instead of new.");
                }
            }
            static getInstance() {
                if (WebAppTelemetry._instance === null) {
                    WebAppTelemetry._allowInstantiation = true;
                    WebAppTelemetry._instance = new WebAppTelemetry();
                    WebAppTelemetry._allowInstantiation = false;
                }
                return WebAppTelemetry._instance;
            }
            // activityId is an optional parameter, if not provided, the ID will come from AppTelemetry
            // If activityId is provided, it must be a valid guid string, else this will crash
            start(cxid, activityId) {
                if (this._webAppActivity) {
                    this.stop(CloudExperienceHost.AppResult.fail);
                }
                if (activityId) {
                    this._webAppActivity = new Microsoft.CloudExperienceHost.WebAppActivity(activityId);
                }
                else {
                    this._webAppActivity = new Microsoft.CloudExperienceHost.WebAppActivity(AppTelemetry.getInstance().getId());
                }
                this._webAppActivity.start(cxid);
                // This call is crashing regularly on some Xbox consoles in the wild.  At this point in time,
                // we could not repro on a devkit and since this is supposed to be a no-op on the console
                // we put this within a try / catch block to keep CXH from crashing.
                try {
                    CloudExperienceHostAPI.EventLogging.webAppActivityStart(cxid);
                }
                catch (e) {
                }
            }
            stop(appResult) {
                if (!this._webAppActivity) {
                    AppTelemetry.getInstance().logCriticalEvent2("NoActiveWebAppRunning", "StopCalled");
                    return;
                }
                this._webAppActivity.stop(appResult);
                this._webAppActivity = null;
                // This call is crashing regularly on some Xbox consoles in the wild.  At this point in time,
                // we could not repro on a devkit and since this is supposed to be a no-op on the console
                // we put this within a try / catch block to keep CXH from crashing.
                try {
                    CloudExperienceHostAPI.EventLogging.webAppActivityStop(appResult);
                }
                catch (e) {
                }
            }
            isStarted() {
                return (this._webAppActivity != null);
            }
            getId() {
                return this._webAppActivity.getId();
            }
            logUserInteractionEvent(...params) {
                this._logEventInternal("logUserInteractionEvent", params);
            }
            logEvent(...params) {
                this._logEventInternal("logEvent", params);
            }
            _logEventInternal(eventType, params) {
                if (!this._webAppActivity) {
                    AppTelemetry.getInstance().logCriticalEvent2("NoActiveWebAppRunning", JSON.stringify(params));
                    return;
                }
                var func = eventType + params.length;
                this._webAppActivity[func].apply(this._webAppActivity, params);
                func = "webAppEvent" + params.length;
                // This call is crashing regularly on some Xbox consoles in the wild.  At this point in time,
                // we could not repro on a devkit and since this is supposed to be a no-op on the console
                // we put this within a try / catch block to keep CXH from crashing.
                try {
                    CloudExperienceHostAPI.EventLogging[func].apply(undefined, params);
                }
                catch (e) {
                }
            }
        }
        WebAppTelemetry._instance = null;
        Telemetry.WebAppTelemetry = WebAppTelemetry;
        function getId() {
            return WebAppTelemetry.getInstance().getId();
        }
        Telemetry.getId = getId;
        function logEvent(...params) {
            var webAppTelemetry = WebAppTelemetry.getInstance();
            webAppTelemetry.logEvent.apply(webAppTelemetry, params);
        }
        Telemetry.logEvent = logEvent;
        function logUserInteractionEvent(...params) {
            var webAppTelemetry = WebAppTelemetry.getInstance();
            webAppTelemetry.logUserInteractionEvent.apply(webAp