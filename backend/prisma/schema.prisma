// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String   @unique
  dni        String   @unique
  cityId     String
  city       City     @relation(fields: [cityId], references: [city_id])
  address    String
  registerAt DateTime @default(now())
  Pedido     Pedido[]
}

model City {
  city_id  String   @id @default(uuid())
  cityName String
  Client   Client[]
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  Session   Session[]
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  device           String
  ip               String?
  refreshTokenHash String
  expiresAt        DateTime
  isValid          Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Categoria {
  id        String     @id @default(uuid())
  nombre    String     @db.VarChar(30)
  productos Producto[]
}

model Producto {
  id             String           @id @default(uuid())
  nombre         String           @db.VarChar(40)
  precio_unidad  Float            @db.Float
  id_categoria   String
  categoria      Categoria        @relation(fields: [id_categoria], references: [id])
  PedidoProducto PedidoProducto[]
}

model Pedido {
  id             String           @id @default(uuid())
  status         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  total          Decimal          @default(0)
  clientId       String
  Client         Client           @relation(fields: [clientId], references: [id])
  PedidoProducto PedidoProducto[]
}

model PedidoProducto {
  id         String @id @default(uuid())
  productoId String
  pedidoId   String
  cantidad   Int

  Pedido   Pedido   @relation(fields: [pedidoId], references: [id])
  Producto Producto @relation(fields: [productoId], references: [id])
}
